openapi: 3.0.3
info:
  title: BigLedger API
  version: 1.0.0
  description: |
    The BigLedger API provides comprehensive accounting and business management capabilities through RESTful endpoints. 
    
    Since all BigLedger applets are built with Angular, every feature in the UI has a corresponding API endpoint, 
    ensuring complete programmatic control over your business operations.
    
    ## Key Features
    - **Complete Accounting**: Chart of accounts, journal entries, financial reporting
    - **E-Invoice Compliance**: PEPPOL and MyInvois integration with automated submission
    - **Inventory Management**: Real-time stock tracking across multiple locations
    - **Sales & CRM**: Customer management, sales orders, quotes, and invoicing
    - **Webhooks**: Real-time event notifications for business events
    - **Multi-Language SDKs**: Official libraries for popular programming languages
    
    ## Authentication
    All API requests require authentication via API key in the Authorization header:
    ```
    Authorization: Bearer blg_live_sk_1234567890abcdef
    X-Company-Id: company_abc123
    ```
    
    ## Rate Limiting
    - **Default Limit**: 1000 requests per hour per API key
    - **Burst Limit**: 10 requests per second
    - Enterprise plans include higher limits
    
    ## Support
    - Documentation: https://developers.bigledger.com
    - Email: developers@bigledger.com
    - Status: https://status.bigledger.com

  contact:
    name: BigLedger Developer Support
    email: developers@bigledger.com
    url: https://developers.bigledger.com
  license:
    name: BigLedger API Terms
    url: https://bigledger.com/terms/api

servers:
  - url: https://api.bigledger.com/v1
    description: Production server
  - url: https://api-sandbox.bigledger.com/v1
    description: Sandbox server

security:
  - ApiKeyAuth: []
  - CompanyHeader: []

paths:
  # Authentication
  /auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify API credentials
      description: Verify that your API key and company access are valid
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthVerifyResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Company Information
  /company:
    get:
      tags:
        - Company
      summary: Get company information
      description: Retrieve basic information about the company
      responses:
        '200':
          description: Company information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'

  # Customers
  /customers:
    get:
      tags:
        - Customers
      summary: List customers
      description: Retrieve a paginated list of customers with optional filtering
      parameters:
        - name: search
          in: query
          description: Search by name, email, or customer number
          schema:
            type: string
        - name: status
          in: query
          description: Filter by customer status
          schema:
            type: string
            enum: [active, inactive, blocked]
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Customers
      summary: Create customer
      description: Create a new customer record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get customer
      description: Retrieve a specific customer by ID
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Customers
      summary: Update customer
      description: Update an existing customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Invoices
  /invoices:
    get:
      tags:
        - Invoices
      summary: List invoices
      description: Retrieve a paginated list of invoices with optional filtering
      parameters:
        - name: customerId
          in: query
          description: Filter by customer ID
          schema:
            type: string
        - name: status
          in: query
          description: Filter by invoice status
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled]
        - name: dateFrom
          in: query
          description: Filter invoices from date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: Filter invoices to date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Invoices retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesListResponse'

    post:
      tags:
        - Invoices
      summary: Create invoice
      description: Create a new sales invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
      responses:
        '201':
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /invoices/{invoiceId}:
    get:
      tags:
        - Invoices
      summary: Get invoice
      description: Retrieve a specific invoice by ID
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # E-Invoice
  /einvoice/create:
    post:
      tags:
        - E-Invoice
      summary: Create e-invoice
      description: Create an e-invoice from an existing sales invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEInvoiceRequest'
      responses:
        '201':
          description: E-invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EInvoiceResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /einvoice/validate:
    post:
      tags:
        - E-Invoice
      summary: Validate e-invoice
      description: Validate invoice data before creating e-invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateEInvoiceRequest'
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EInvoiceValidationResponse'

  # Inventory
  /items:
    get:
      tags:
        - Inventory
      summary: List items
      description: Retrieve inventory items with filtering options
      parameters:
        - name: search
          in: query
          description: Search by name, code, or barcode
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category ID
          schema:
            type: string
        - name: lowStock
          in: query
          description: Filter items below minimum stock
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        '200':
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsListResponse'

    post:
      tags:
        - Inventory
      summary: Create item
      description: Create a new inventory item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'

  # Webhooks
  /webhooks/subscribe:
    post:
      tags:
        - Webhooks
      summary: Create webhook subscription
      description: Subscribe to webhook events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'

  /webhooks:
    get:
      tags:
        - Webhooks
      summary: List webhook subscriptions
      description: Retrieve all webhook subscriptions
      responses:
        '200':
          description: Webhook subscriptions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksListResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API key authentication using Bearer token
    CompanyHeader:
      type: apiKey
      in: header
      name: X-Company-Id
      description: Company ID header required for all requests

  schemas:
    # Common schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        meta:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            requestId:
              type: string

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              type: object
              properties:
                code:
                  type: string
                message:
                  type: string
                details:
                  type: array
                  items:
                    type: object
                requestId:
                  type: string
                timestamp:
                  type: string
                  format: date-time

    Pagination:
      type: object
      properties:
        hasMore:
          type: boolean
        nextCursor:
          type: string
        limit:
          type: integer
        total:
          type: integer

    # Authentication schemas
    AuthVerifyResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                authenticated:
                  type: boolean
                company:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    plan:
                      type: string
                permissions:
                  type: array
                  items:
                    type: string

    # Company schemas
    CompanyResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                currency:
                  type: string
                country:
                  type: string
                plan:
                  type: string
                createdAt:
                  type: string
                  format: date-time

    # Customer schemas
    Address:
      type: object
      properties:
        street:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string

    Customer:
      type: object
      properties:
        id:
          type: string
        customerNumber:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        currency:
          type: string
        paymentTerms:
          type: integer
        creditLimit:
          type: number
          format: double
        currentBalance:
          type: number
          format: double
        totalSales:
          type: number
          format: double
        status:
          type: string
          enum: [active, inactive, blocked]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCustomerRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        paymentTerms:
          type: integer
          minimum: 0
          maximum: 365
        creditLimit:
          type: number
          format: double
          minimum: 0

    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        paymentTerms:
          type: integer
          minimum: 0
          maximum: 365
        creditLimit:
          type: number
          format: double
          minimum: 0
        status:
          type: string
          enum: [active, inactive, blocked]

    CustomerResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Customer'

    CustomersListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Customer'
            pagination:
              $ref: '#/components/schemas/Pagination'

    # Invoice schemas
    InvoiceItem:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        quantity:
          type: number
          format: double
        unitPrice:
          type: number
          format: double
        lineTotal:
          type: number
          format: double
        taxCode:
          type: string
        taxRate:
          type: number
          format: double
        taxAmount:
          type: number
          format: double

    Invoice:
      type: object
      properties:
        id:
          type: string
        invoiceNumber:
          type: string
        customerId:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        invoiceDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        currency:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        subtotal:
          type: number
          format: double
        totalTax:
          type: number
          format: double
        total:
          type: number
          format: double
        amountPaid:
          type: number
          format: double
        amountDue:
          type: number
          format: double
        notes:
          type: string
        terms:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateInvoiceRequest:
      type: object
      required:
        - customerId
        - items
      properties:
        customerId:
          type: string
        invoiceDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        items:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - description
              - quantity
              - unitPrice
            properties:
              description:
                type: string
              quantity:
                type: number
                format: double
                minimum: 0
              unitPrice:
                type: number
                format: double
                minimum: 0
              taxCode:
                type: string
        notes:
          type: string
        terms:
          type: string

    InvoiceResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Invoice'

    InvoicesListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Invoice'
            pagination:
              $ref: '#/components/schemas/Pagination'

    # E-Invoice schemas
    CreateEInvoiceRequest:
      type: object
      required:
        - invoiceId
        - format
      properties:
        invoiceId:
          type: string
        format:
          type: string
          enum: [PEPPOL_UBL, UBL21]
        autoSubmit:
          type: boolean
          default: false

    ValidateEInvoiceRequest:
      type: object
      required:
        - invoiceId
        - format
      properties:
        invoiceId:
          type: string
        format:
          type: string
          enum: [PEPPOL_UBL, UBL21]
        strictValidation:
          type: boolean
          default: true

    EInvoiceValidationResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                isValid:
                  type: boolean
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
                      field:
                        type: string
                warnings:
                  type: array
                  items:
                    type: object

    EInvoiceResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string
                uuid:
                  type: string
                status:
                  type: string
                  enum: [created, validated, submitted, accepted, rejected]
                format:
                  type: string
                government:
                  type: object
                  properties:
                    portal:
                      type: string
                    submissionId:
                      type: string
                    longId:
                      type: string

    # Inventory schemas
    Item:
      type: object
      properties:
        id:
          type: string
        itemCode:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [inventory, service, non_inventory]
        unit:
          type: string
        pricing:
          type: object
          properties:
            costPrice:
              type: number
              format: double
            sellingPrice:
              type: number
              format: double
            currency:
              type: string
        inventory:
          type: object
          properties:
            tracked:
              type: boolean
            currentStock:
              type: number
              format: double
            minimumStock:
              type: number
              format: double
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreateItemRequest:
      type: object
      required:
        - itemCode
        - name
        - type
      properties:
        itemCode:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [inventory, service, non_inventory]
        unit:
          type: string
        pricing:
          type: object
          properties:
            costPrice:
              type: number
              format: double
              minimum: 0
            sellingPrice:
              type: number
              format: double
              minimum: 0

    ItemResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Item'

    ItemsListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Item'
            pagination:
              $ref: '#/components/schemas/Pagination'

    # Webhook schemas
    CreateWebhookRequest:
      type: object
      required:
        - url
        - events
      properties:
        url:
          type: string
          format: uri
          description: HTTPS endpoint to receive webhook notifications
        events:
          type: array
          items:
            type: string
            enum:
              - invoice.created
              - invoice.paid
              - payment.received
              - customer.created
              - inventory.low_stock
              - einvoice.accepted
        secret:
          type: string
          description: Secret key for webhook signature verification
        description:
          type: string

    Webhook:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        secret:
          type: string
        description:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        statistics:
          type: object
          properties:
            totalDelivered:
              type: integer
            totalFailed:
              type: integer
            lastDelivery:
              type: string
              format: date-time

    WebhookResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Webhook'

    WebhooksListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Webhook'

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "BAD_REQUEST"
              message: "Invalid request format"
              requestId: "req_123456789"
              timestamp: "2024-01-15T10:30:00Z"

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Authentication credentials were not provided or are invalid"
              requestId: "req_123456789"
              timestamp: "2024-01-15T10:30:00Z"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "The requested resource was not found"
              requestId: "req_123456789"
              timestamp: "2024-01-15T10:30:00Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              details:
                - field: "email"
                  message: "Email format is invalid"
                  code: "INVALID_EMAIL_FORMAT"
              requestId: "req_123456789"
              timestamp: "2024-01-15T10:30:00Z"

tags:
  - name: Authentication
    description: Authentication and authorization operations
  - name: Company
    description: Company information and settings
  - name: Customers
    description: Customer management operations
  - name: Invoices
    description: Sales invoice operations
  - name: E-Invoice
    description: E-invoice compliance and submission
  - name: Inventory
    description: Inventory and item management
  - name: Webhooks
    description: Webhook subscription management

externalDocs:
  description: BigLedger Developer Documentation
  url: https://developers.bigledger.com